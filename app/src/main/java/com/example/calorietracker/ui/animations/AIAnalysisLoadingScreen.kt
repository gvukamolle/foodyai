package com.example.calorietracker.ui.animations

import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AutoAwesome
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.draw.blur
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Popup
import androidx.compose.ui.window.PopupProperties
import kotlinx.coroutines.delay
import kotlin.random.Random
import androidx.compose.ui.draw.BlurredEdgeTreatment
import androidx.compose.ui.graphics.CompositingStrategy

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–º—ã—Ç–∏—è —Ñ–æ–Ω–∞ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ.
 */
@Composable
private fun FullscreenEffectContainer(
    onDismiss: () -> Unit,
    content: @Composable BoxScope.() -> Unit
) {

    val focusManager = LocalFocusManager.current
    LaunchedEffect(Unit) {
        focusManager.clearFocus()
    }

    Popup(
        onDismissRequest = onDismiss,
        properties = PopupProperties(
            dismissOnBackPress = false,
            dismissOnClickOutside = false,
            usePlatformDefaultWidth = false
        )
    ) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.White.copy(alpha = 0.35f))
        ) {

            AnimatedVisibility(
                visible = true,
                enter = fadeIn(animationSpec = tween(300)),
                exit = fadeOut(animationSpec = tween(300))
            ) {
                content()
            }
        }
    }
}

/**
 * –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª—å—Ü–æ –∑–∞–≥—Ä—É–∑–∫–∏ AI
 */
@Composable
private fun AILoadingRing() {
    val infiniteTransition = rememberInfiniteTransition(label = "loading")

    val rotation by infiniteTransition.animateFloat(
        initialValue = 0f,
        targetValue = 360f,
        animationSpec = infiniteRepeatable(
            animation = tween(2000, easing = LinearEasing),
            repeatMode = RepeatMode.Restart
        ),
        label = "rotation"
    )

    val scale by infiniteTransition.animateFloat(
        initialValue = 0.95f,
        targetValue = 1.05f,
        animationSpec = infiniteRepeatable(
            animation = tween(1000, easing = FastOutSlowInEasing),
            repeatMode = RepeatMode.Reverse
        ),
        label = "scale"
    )

    Box(
        modifier = Modifier
            .size(120.dp)
            .graphicsLayer {
                scaleX = scale
                scaleY = scale
            },
        contentAlignment = Alignment.Center
    ) {
        Box(
            modifier = Modifier
                .size(120.dp)
                .background(
                    brush = Brush.radialGradient(
                        colors = listOf(
                            Color.Black.copy(alpha = 0.1f),
                            Color.Transparent
                        )
                    ),
                    shape = CircleShape
                )
        )

        CircularProgressIndicator(
            modifier = Modifier
                .size(80.dp)
                .rotate(rotation),
            color = Color.Black,
            strokeWidth = 4.dp,
            trackColor = Color.Black.copy(alpha = 0.2f)
        )

        Icon(
            imageVector = Icons.Default.AutoAwesome,
            contentDescription = null,
            modifier = Modifier.size(32.dp),
            tint = Color.Black
        )
    }
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–±–∞–≤–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
 *
 * @param inputMethod –ú–µ—Ç–æ–¥ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: "photo", "text", "chat", "analysis", "recipe"
 */
@OptIn(ExperimentalAnimationApi::class)
@Composable
fun AnimatedPhrases(
    inputMethod: String? = null,
    modifier: Modifier = Modifier
) {
    // –ë–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã
    val baseFoodPhrases = listOf(
        "–î–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å... ü§î",
        "–¢–∞–∫, —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –µ–¥—É... üçΩÔ∏è",
        "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è —ç—Ç–æ —Å—ä–µ–¥–æ–±–Ω–æ... üßê",
        "–ê–∫—Ç–∏–≤–∏—Ä—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏... üß†",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤... üî¨",
        "–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–∫—É—Å–Ω—è—à–µ–∫... üìö",
        "–•–º, –≤—ã–≥–ª—è–¥–∏—Ç –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ... üòã",
        "–ü—Ä–∏–º–µ–Ω—è—é –º–∞–≥–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ –ö–ë–ñ–£... ‚ú®",
        "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ, –µ—â–µ —á—É—Ç—å-—á—É—Ç—å... ‚è≥",
        "AI –≤ –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ... ü§ñ"
    )

    // –§—Ä–∞–∑—ã –¥–ª—è —Ñ–æ—Ç–æ
    val photoPhrases = listOf(
        "–°—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –ø–æ –ø–∏–∫—Å–µ–ª—è–º... üì∏",
        "–°–∫–∞–Ω–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... üñºÔ∏è",
        "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –ø–æ–¥ –º–∏–∫—Ä–æ—Å–∫–æ–ø–æ–º... üîç",
        "–≠—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ —Ç–æ—Ä—Ç? üéÇ",
        "–û–ø—Ä–µ–¥–µ–ª—è—é –ø—Ä–æ–¥—É–∫—Ç –ø–æ —Ñ–æ—Ç–æ... üì∑",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç—É—Ä—ã... üé®"
    )

    // –§—Ä–∞–∑—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã
    val textFoodPhrases = listOf(
        "–ß–∏—Ç–∞—é –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ... üìñ",
        "–†–∞–∑–±–∏—Ä–∞—é —Ç–µ–∫—Å—Ç –ø–æ –±—É–∫–≤–∞–º... üìù",
        "–ü–æ–Ω–∏–º–∞—é, –æ —á–µ–º –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ... üí¨",
        "–ò—â—É –≤ –±–∞–∑–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é... üîé",
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ —Å–ª–æ–≤–∞... üí≠",
        "–ü–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç –≤ –∫–∞–ª–æ—Ä–∏–∏... üìä"
    )

    // –§—Ä–∞–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    val macrosPhrases = listOf(
        "–°–∫–∞–Ω–∏—Ä—É—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–µ–ª–∫–æ–≤... ü•©",
        "–ò—â—É —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã... üçû",
        "–ñ–∏—Ä—ã, –ø–æ–∫–∞–∂–∏—Ç–µ—Å—å! üßà",
        "–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—é –ë–ñ–£... üßÆ"
    )

    // –§—Ä–∞–∑—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞
    val chatPhrases = listOf(
        "–†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º... üí≠",
        "–§–æ—Ä–º—É–ª–∏—Ä—É—é –º—ã—Å–ª–∏... ü§î",
        "–ü–æ–¥–±–∏—Ä–∞—é –Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞... üìù",
        "–û–±–¥—É–º—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å... üß†",
        "–ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç... ‚è≥",
        "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π... üìö",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç... üîç",
        "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å... üéØ",
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... üí°",
        "–°–µ–∫—É–Ω–¥–æ—á–∫—É, –¥—É–º–∞—é... ‚ö°"
    )

    // –§—Ä–∞–∑—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–Ω—è
    val analysisPhrases = listOf(
        "–ò–∑—É—á–∞—é –≤–∞—à —Ä–∞—Ü–∏–æ–Ω... üìä",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è... üìà",
        "–°—á–∏—Ç–∞—é –æ–±—â–µ–µ –ö–ë–ñ–£... üßÆ",
        "–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤... ‚öñÔ∏è",
        "–û—Ü–µ–Ω–∏–≤–∞—é –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –ø–∏—Ç–∞–Ω–∏—è... ü•ó",
        "–°—Ä–∞–≤–Ω–∏–≤–∞—é —Å –≤–∞—à–∏–º–∏ —Ü–µ–ª—è–º–∏... üéØ",
        "–ò—â—É –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø–∏—Ç–∞–Ω–∏–∏... üîç",
        "–ì–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã... üí°",
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å... üî•",
        "–§–æ—Ä–º–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏... üìã"
    )

    // –§—Ä–∞–∑—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    val recipePhrases = listOf(
        "–ü—Ä–∏–¥—É–º—ã–≤–∞—é —Ä–µ—Ü–µ–ø—Ç... üë®‚Äçüç≥",
        "–ü–æ–¥–±–∏—Ä–∞—é –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã... ü•ï",
        "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏... ‚öñÔ∏è",
        "–í—Å–ø–æ–º–∏–Ω–∞—é –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã... üîê",
        "–ö–æ–ª–¥—É—é –Ω–∞ –∫—É—Ö–Ω–µ... ‚ú®",
        "–°–æ—Å—Ç–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤... üìù",
        "–û–ø—Ä–µ–¥–µ–ª—è—é –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏... ‚è≤Ô∏è",
        "–ü—Ä–æ–¥—É–º—ã–≤–∞—é —ç—Ç–∞–ø—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è... üìã",
        "–ê–¥–∞–ø—Ç–∏—Ä—É—é –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è... üéØ",
        "–°–æ–∑–¥–∞—é –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —à–µ–¥–µ–≤—Ä... üç≥"
    )

    // –í—ã–±–∏—Ä–∞–µ–º —Ñ—Ä–∞–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
    val phrases = remember(inputMethod) {
        val combinedPhrases = mutableListOf<String>()

        when (inputMethod) {
            "photo" -> {
                combinedPhrases.addAll(baseFoodPhrases)
                combinedPhrases.addAll(photoPhrases)
                combinedPhrases.addAll(macrosPhrases)
            }
            "text" -> {
                combinedPhrases.addAll(baseFoodPhrases)
                combinedPhrases.addAll(textFoodPhrases)
                combinedPhrases.addAll(macrosPhrases)
            }
            "chat" -> {
                combinedPhrases.addAll(chatPhrases)
            }
            "analysis" -> {
                combinedPhrases.addAll(analysisPhrases)
            }
            "recipe" -> {
                combinedPhrases.addAll(recipePhrases)
            }
            else -> {
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—Ä–∞–∑—ã –¥–ª—è —á–∞—Ç–∞
                combinedPhrases.addAll(chatPhrases)
            }
        }

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
        combinedPhrases.shuffled()
    }

    // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ñ—Ä–∞–∑—ã –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö
    var currentPhraseIndex by remember { mutableStateOf(0) }
    var shownIndices by remember { mutableStateOf(setOf<Int>()) }
    var isAnimating by remember { mutableStateOf(false) }
    var currentPhrase by remember { mutableStateOf("") }
    var showPhrase by remember { mutableStateOf(true) }
    var phraseBlur by remember { mutableStateOf(0.dp) }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
    fun getNextRandomIndex(): Int {
        // –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ –≤—Å–µ —Ñ—Ä–∞–∑—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        if (shownIndices.size >= phrases.size) {
            shownIndices = setOf()
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏
        val availableIndices = phrases.indices.filter { !shownIndices.contains(it) }
        
        return if (availableIndices.isNotEmpty()) {
            availableIndices.random()
        } else {
            Random.nextInt(phrases.size)
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π —Ñ—Ä–∞–∑—ã
    LaunchedEffect(Unit) {
        currentPhraseIndex = getNextRandomIndex()
        shownIndices = shownIndices + currentPhraseIndex
        currentPhrase = phrases.getOrElse(currentPhraseIndex) { phrases.firstOrNull() ?: "" }
    }

    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    LaunchedEffect(Unit) {
        delay(5000) // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        
        while (true) {
            if (!isAnimating) {
                isAnimating = true
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º
                phraseBlur = 8.dp
                delay(200)
                showPhrase = false
                
                delay(300) // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ—Ä–∞–∑–∞–º–∏
                
                // –ú–µ–Ω—è–µ–º —Ñ—Ä–∞–∑—É
                val nextIndex = getNextRandomIndex()
                shownIndices = shownIndices + nextIndex
                currentPhraseIndex = nextIndex
                currentPhrase = phrases.getOrElse(currentPhraseIndex) { phrases.firstOrNull() ?: "" }
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º
                showPhrase = true
                phraseBlur = 0.dp
                
                isAnimating = false
            }
            
            delay(3000) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ñ—Ä–∞–∑—É 3 —Å–µ–∫—É–Ω–¥—ã
        }
    }

    // –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ä–∞–∑–º—ã—Ç–∏—è
    val animatedAlpha by animateFloatAsState(
        targetValue = if (showPhrase) 1f else 0f,
        animationSpec = tween(
            durationMillis = if (showPhrase) 400 else 300,
            easing = FastOutSlowInEasing
        ),
        label = "phrase_alpha"
    )

    val animatedBlur by animateDpAsState(
        targetValue = phraseBlur,
        animationSpec = tween(
            durationMillis = if (phraseBlur == 0.dp) 400 else 300,
            easing = FastOutSlowInEasing
        ),
        label = "phrase_blur"
    )

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ä–∞–∑–º—ã—Ç–∏—è
    Row(
        modifier = modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.Start,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Box(
            modifier = Modifier
                .graphicsLayer {
                    // –ì—Ä—É–ø–ø–æ–≤–∞—è –∞–ª—å—Ñ–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –≤ offscreen-–±—É—Ñ–µ—Ä–µ
                    alpha = animatedAlpha
                    compositingStrategy = CompositingStrategy.Offscreen
                }
                // –†–∞–∑–º—ã—Ç–∏–µ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏ –ø–æ –∫—Ä–∞—è–º
                .blur(
                    radius = animatedBlur,
                    edgeTreatment = BlurredEdgeTreatment.Unbounded
                )
        ) {
            Text(
                text = currentPhrase,
                style = MaterialTheme.typography.bodyMedium.copy(
                    fontSize = 15.sp * 1.05f,
                    lineHeight = MaterialTheme.typography.bodyMedium.lineHeight * 1.1f,
                    fontWeight = FontWeight.Normal
                ),
                color = Color.Black
            )
        }
    }
}

@Composable
fun AIAnalysisLoadingScreen(
    modifier: Modifier = Modifier,
    onDismiss: () -> Unit = {},
    showDismissButton: Boolean = false,
    inputMethod: String? = null // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
) {
    FullscreenEffectContainer(onDismiss = onDismiss) {
        Column(
            modifier = modifier
                .fillMaxSize()
                .padding(bottom = 16.dp, top = 24.dp, start = 24.dp, end = 24.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.SpaceBetween
        ) {
            Spacer(modifier = Modifier.weight(1f))

            AILoadingRing()

            Column(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxWidth(),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Bottom
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(80.dp),
                    contentAlignment = Alignment.Center
                ) {
                    AnimatedPhrases(inputMethod = inputMethod)
                }

                Spacer(modifier = Modifier.height(24.dp))

                if (showDismissButton) {
                    Button(
                        onClick = onDismiss,
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(56.dp),
                        shape = RoundedCornerShape(28.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color.Black,
                            contentColor = Color.White
                        )
                    ) {
                        Text(
                            text = "–û—Ç–º–µ–Ω–∏—Ç—å",
                            style = MaterialTheme.typography.bodyLarge.copy(
                                fontWeight = FontWeight.SemiBold
                            )
                        )
                    }
                }
            }
        }
    }
}