package com.example.calorietracker.pages

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.scaleIn
import androidx.compose.animation.scaleOut
import androidx.compose.animation.animateColorAsState
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.spring
import androidx.compose.animation.core.Spring
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material.ripple.rememberRipple
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.TransformOrigin
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.hapticfeedback.HapticFeedbackType
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalHapticFeedback
import androidx.compose.ui.unit.DpOffset
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.window.PopupProperties
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import android.content.Context
import androidx.compose.foundation.clickable
import java.time.LocalTime
import androidx.compose.ui.window.Popup
import androidx.compose.ui.platform.LocalDensity
import com.example.calorietracker.extensions.fancyShadow
import androidx.compose.ui.platform.LocalFocusManager


// –í–∞—Ä–∏–∞–Ω—Ç 2: –° –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏ (–ë–ï–ó –°–ï–†–´–• –û–ë–õ–ê–°–¢–ï–ô)
@OptIn(ExperimentalAnimationApi::class)
@Composable
fun PlusDropdownMenuV2(
    expanded: Boolean,
    onDismissRequest: () -> Unit,
    onCameraClick: () -> Unit,
    onGalleryClick: () -> Unit,
    onDescribeClick: () -> Unit,
    onManualClick: () -> Unit,
    context: Context
) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ SharedPreferences
    val prefs = context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
    val lastAction = prefs.getString("last_food_action", null)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    val hour = LocalTime.now().hour
    val contextualHint = when (hour) {
        in 6..10 -> "–í—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞–∫–∞ üç≥"
        in 11..15 -> "–í—Ä–µ–º—è –æ–±–µ–¥–∞ üçù"
        in 16..18 -> "–í—Ä–µ–º—è –ø–µ—Ä–µ–∫—É—Å–∞ üçé"
        in 19..21 -> "–í—Ä–µ–º—è —É–∂–∏–Ω–∞ üçΩÔ∏è"
        else -> "–ü–æ–∑–¥–Ω–∏–π –ø–µ—Ä–µ–∫—É—Å üåô"
    }

    AnimatedVisibility(
        visible = expanded,
        enter = fadeIn(animationSpec = tween(150)) + scaleIn(
            transformOrigin = TransformOrigin(0.9f, 0.1f),
            animationSpec = tween(150)
        ),
        exit = fadeOut(animationSpec = tween(100)) + scaleOut(
            transformOrigin = TransformOrigin(0.9f, 0.1f),
            animationSpec = tween(100)
        )
    ) {
        val density = LocalDensity.current
        val focusManager = LocalFocusManager.current
        val ime = WindowInsets.ime
        val imeVisible by remember {
            derivedStateOf { ime.getBottom(density) > 0 }
        }
        Popup(
            alignment = Alignment.BottomEnd,
            offset = with(density) {
                IntOffset(
                    x = (30).dp.roundToPx(), // <-- –¢–µ–ø–µ—Ä—å —Å–º–µ—â–µ–Ω–∏–µ –ø–æ X –≤ dp
                    y = (-40).dp.roundToPx()   // <-- –¢–µ–ø–µ—Ä—å —Å–º–µ—â–µ–Ω–∏–µ –ø–æ Y –≤ dp
                )
            },
            onDismissRequest = {
                if (imeVisible) {
                    focusManager.clearFocus()
                } else {
                    onDismissRequest()
                }
            },            properties = PopupProperties(
                focusable = true,
                dismissOnBackPress = true,
                dismissOnClickOutside = false
            )
        ) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.BottomEnd
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .clickable(
                            interactionSource = remember { MutableInteractionSource() },
                            indication = null
                        ) {
                            if (imeVisible) {
                                focusManager.clearFocus()
                            } else {
                                onDismissRequest()
                            }
                        }
                )
                Card(
                modifier = Modifier
                    .fancyShadow(
                        borderRadius = 20.dp,
                        shadowRadius = 8.dp,
                        alpha = 0.25f
                    )
                    .width(230.dp), // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ—Å—Ç–∞–≤–ª—è–µ–º

                shape = RoundedCornerShape(20.dp),
                colors = CardDefaults.cardColors(containerColor = Color.White),
                // –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É —Å–∞–º–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ–Ω–∏/elevation
                elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)
                ){}
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(
                            brush = Brush.verticalGradient(
                                colors = listOf(
                                    Color(0xFFFFFFFF),
                                    Color(0xFFFAFAFA)
                                )
                            )
                        )
                        .padding(16.dp),
                    verticalArrangement = Arrangement.spacedBy(10.dp)
                ) {
                    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                color = Color(0xFFF5F5F5),
                                shape = RoundedCornerShape(8.dp)
                            )
                            .padding(horizontal = 12.dp, vertical = 8.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = contextualHint,
                            fontSize = 13.sp,
                            fontWeight = FontWeight.Medium,
                            color = Color(0xFF424242)
                        )
                    }

                    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
                    lastAction?.let { action ->
                        val (text, subtitle, icon, color) = when (action) {
                            "camera" -> listOf("–°—Ñ–æ—Ç–∫–∞—Ç—å", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ", Icons.Default.PhotoCamera, Color(0xFF4CAF50))
                            "gallery" -> listOf("–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ", Icons.Default.Image, Color(0xFF2196F3))
                            "describe" -> listOf("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ", Icons.Default.AutoAwesome, Color(0xFFFF9800))
                            "manual" -> listOf("–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ", Icons.Default.Keyboard, Color(0xFF9C27B0))
                            else -> return@let
                        }

                        CompactMenuItem(
                            text = text as String,
                            subtitle = subtitle as String,
                            icon = icon as ImageVector,
                            iconColor = color as Color,
                            onClick = {
                                saveLastAction(context, action)
                                onDismissRequest()
                                when (action) {
                                    "camera" -> onCameraClick()
                                    "gallery" -> onGalleryClick()
                                    "describe" -> onDescribeClick()
                                    "manual" -> onManualClick()
                                }
                            },
                            delay = 0,
                            isRecent = true
                        )

                        HorizontalDivider(
                            modifier = Modifier.padding(vertical = 2.dp),
                            thickness = 1.dp,
                            color = Color(0xFFEEEEEE)
                        )
                    }

                    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
                    val menuItems = listOf(
                        MenuItemData("camera", "–°—Ñ–æ—Ç–∫–∞—Ç—å", "–ë—ã—Å—Ç—Ä—ã–π —Å–Ω–∏–º–æ–∫", Icons.Default.PhotoCamera, Color(0xFF4CAF50), onCameraClick),
                        MenuItemData("gallery", "–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ", "–ò–∑ –≤–∞—à–µ–π –≥–∞–ª–µ—Ä–µ–∏", Icons.Default.Image, Color(0xFF2196F3), onGalleryClick),
                        MenuItemData("describe", "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ", "–ê –º—ã –ø–æ–π–º–µ–º", Icons.Default.AutoAwesome, Color(0xFFFF9800), onDescribeClick),
                        MenuItemData("manual", "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", "–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å", Icons.Default.Keyboard, Color(0xFF9C27B0), onManualClick)
                    )

                    menuItems.forEachIndexed { index, item ->
                        if (lastAction != item.id) {
                            CompactMenuItem(
                                text = item.text,
                                subtitle = item.subtitle,
                                icon = item.icon,
                                iconColor = item.color,
                                onClick = {
                                    saveLastAction(context, item.id)
                                    onDismissRequest()
                                    item.onClick()
                                },
                                delay = if (lastAction == null) index * 50 else (index + 1) * 50
                            )
                        }
                    }
                }
            }
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è data class –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
internal data class MenuItemData(
    val id: String,
    val text: String,
    val subtitle: String,
    val icon: ImageVector,
    val color: Color,
    val onClick: () -> Unit
)

// –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é —Å ripple —ç—Ñ—Ñ–µ–∫—Ç–æ–º (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
@Composable
private fun CompactMenuItem(
    text: String,
    subtitle: String,
    icon: ImageVector,
    iconColor: Color,
    onClick: () -> Unit,
    delay: Int = 0,
    isRecent: Boolean = false
) {
    var visible by remember { mutableStateOf(false) }
    var isPressed by remember { mutableStateOf(false) }

    LaunchedEffect(Unit) {
        kotlinx.coroutines.delay(delay.toLong())
        visible = true
    }

    val scale by animateFloatAsState(
        targetValue = when {
            isPressed -> 0.95f
            visible -> 1f
            else -> 0.9f
        },
        animationSpec = spring(
            dampingRatio = Spring.DampingRatioMediumBouncy,
            stiffness = Spring.StiffnessLow
        ),
        label = "scale_animation"
    )

    val alpha by animateFloatAsState(
        targetValue = if (visible) 1f else 0f,
        animationSpec = tween(200),
        label = "alpha_animation"
    )

    val haptic = LocalHapticFeedback.current
    val coroutineScope = rememberCoroutineScope()
    val interactionSource = remember { MutableInteractionSource() }

    // –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
    Surface(
        // –ü–∞—Ä–∞–º–µ—Ç—Ä onClick —É–±—Ä–∞–Ω –æ—Ç—Å—é–¥–∞
        modifier = Modifier
            .fillMaxWidth()
            .graphicsLayer {
                scaleX = scale
                scaleY = scale
                this.alpha = alpha
            }
            // 1. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ –Ω—É–∂–Ω–æ–π —Ñ–æ—Ä–º–µ
            .clip(RoundedCornerShape(12.dp))
            // 2. –ó–∞—Ç–µ–º –¥–µ–ª–∞–µ–º –µ–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å ripple-—ç—Ñ—Ñ–µ–∫—Ç–æ–º
            .clickable(
                interactionSource = interactionSource,
                indication = ripple(
                    bounded = true, // Ripple –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                    color = iconColor
                ),
                onClick = {
                    haptic.performHapticFeedback(HapticFeedbackType.LongPress)
                    isPressed = true
                    coroutineScope.launch {
                        delay(100) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è
                        onClick()
                    }
                }
            ),
        shape = RoundedCornerShape(12.dp),
        color = Color.Transparent
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã indication –∏ interactionSource —É–±—Ä–∞–Ω—ã, —Ç.–∫. –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –≤ .clickable()
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                // –≠—Ç–æ—Ç background —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
                .background(
                    color = if (isRecent) {
                        iconColor.copy(alpha = 0.12f)
                    } else {
                        iconColor.copy(alpha = 0.08f)
                    }
                    // –§–æ—Ä–º–∞ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ Surface —É–∂–µ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º—É
                )
                .padding(12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(40.dp)
                    .background(
                        color = iconColor.copy(alpha = 0.15f),
                        shape = CircleShape
                    ),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    icon,
                    contentDescription = null,
                    tint = iconColor,
                    modifier = Modifier.size(20.dp)
                )
            }
            Spacer(modifier = Modifier.width(12.dp))
            Column {
                Text(
                    text,
                    fontSize = 15.sp,
                    fontWeight = if (isRecent) FontWeight.SemiBold else FontWeight.Medium,
                    color = Color(0xFF1A1A1A)
                )
                Text(
                    subtitle,
                    fontSize = 12.sp,
                    color = if (isRecent) iconColor else Color(0xFF757575),
                    fontWeight = if (isRecent) FontWeight.Medium else FontWeight.Normal
                )
            }
            if (isRecent) {
                Spacer(modifier = Modifier.weight(1f))
                Icon(
                    Icons.Default.Schedule,
                    contentDescription = "–ù–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ",
                    tint = iconColor,
                    modifier = Modifier.size(16.dp)
                )
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
private fun saveLastAction(context: Context, action: String) {
    context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
        .edit()
        .putString("last_food_action", action)
        .apply()
}


// –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ MainScreen –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ
@Composable
fun PlusDropdownMenu(
    expanded: Boolean,
    onDismissRequest: () -> Unit,
    onCameraClick: () -> Unit,
    onGalleryClick: () -> Unit,
    onDescribeClick: () -> Unit,
    onManualClick: () -> Unit,
) {
    val context = LocalContext.current

    PlusDropdownMenuV2( // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç 2
        expanded = expanded,
        onDismissRequest = onDismissRequest,
        onCameraClick = onCameraClick,
        onGalleryClick = onGalleryClick,
        onDescribeClick = onDescribeClick,
        onManualClick = onManualClick,
        context = context
    )
}

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è MainScreen (—Ç–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞ —á—Ç–æ –∏ Send)
@Composable
fun AnimatedPlusButton(
    expanded: Boolean,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    val rotation by animateFloatAsState(
        targetValue = if (expanded) 45f else 0f,
        animationSpec = spring(
            dampingRatio = Spring.DampingRatioMediumBouncy,
            stiffness = Spring.StiffnessLow
        )
    )

    val scale by animateFloatAsState(
        targetValue = if (expanded) 0.9f else 1f,
        animationSpec = spring(
            dampingRatio = Spring.DampingRatioMediumBouncy,
            stiffness = Spring.StiffnessMedium
        )
    )

    val haptic = LocalHapticFeedback.current

    IconButton(
        onClick = {
            haptic.performHapticFeedback(HapticFeedbackType.LongPress)
            onClick()
        },
        modifier = modifier.size(40.dp) // –¢–æ—Ç –∂–µ —Ä–∞–∑–º–µ—Ä —á—Ç–æ —É Send
    ) {
        Icon(
            Icons.Default.Add,
            contentDescription = "–î–æ–±–∞–≤–∏—Ç—å",
            tint = Color.Black,
            modifier = Modifier
                .size(24.dp)
                .graphicsLayer {
                    rotationZ = rotation
                    scaleX = scale
                    scaleY = scale
                }
        )
    }
}