package com.example.calorietracker

import android.content.Context
import androidx.compose.runtime.*
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.*
import com.example.calorietracker.auth.AuthManager
import com.example.calorietracker.data.DataRepository
import com.example.calorietracker.ChatMessage
import com.example.calorietracker.MessageType
import com.example.calorietracker.FoodItem
import dagger.hilt.android.lifecycle.HiltViewModel
import dagger.hilt.android.qualifiers.ApplicationContext
import javax.inject.Inject

@HiltViewModel
class ChatViewModel @Inject constructor(
    private val repository: DataRepository,
    @ApplicationContext private val context: Context,
    private val authManager: AuthManager
) : ViewModel() {

    private var _messages by mutableStateOf<List<ChatMessage>>(emptyList())
    var messages: List<ChatMessage>
        get() = _messages
        private set(value) { _messages = value }
    fun setMessages(value: List<ChatMessage>) { _messages = value }

    var inputMessage by mutableStateOf("")
        private set
    fun setInputMessage(value: String) { inputMessage = value }

    private var loadingJob: Job? = null

    fun addMessage(message: ChatMessage) {
        messages = messages + message
    }

    fun markMessageAnimated(message: ChatMessage) {
        messages = messages.map {
            if (it.id == message.id) it.copy(animate = true) else it
        }
    }

    fun removeMessageWithAnimation(messageId: String) {
        messages = messages.map {
            if (it.id == messageId) it.copy(animate = false) else it
        }
        viewModelScope.launch {
            delay(300)
            messages = messages.filterNot { it.id == messageId }
        }
    }

    fun removeFoodMessages(food: FoodItem) {
        messages = messages.filterNot { it.foodItem == food }
    }

    private fun getLoadingPhrases(inputMethod: String?): List<String> {
        val baseFoodPhrases = listOf(
            "–î–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å... ü§î",
            "–¢–∞–∫, —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –µ–¥—É... üçΩÔ∏è",
            "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è —ç—Ç–æ —Å—ä–µ–¥–æ–±–Ω–æ... üßê",
            "–ê–∫—Ç–∏–≤–∏—Ä—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏... üß†",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–æ–ª–µ–∫—É–ª—è—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤... üî¨",
            "–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–∫—É—Å–Ω—è—à–µ–∫... üìö",
            "–•–º, –≤—ã–≥–ª—è–¥–∏—Ç –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ... üòã",
            "–ü—Ä–∏–º–µ–Ω—è—é –º–∞–≥–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ –ö–ë–ñ–£... ‚ú®",
            "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ, –µ—â–µ —á—É—Ç—å-—á—É—Ç—å... ‚è≥",
            "AI –≤ –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ... ü§ñ"
        )

        val photoPhrases = listOf(
            "–°—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –ø–æ –ø–∏–∫—Å–µ–ª—è–º... üì∏",
            "–°–∫–∞–Ω–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... üñºÔ∏è",
            "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –ø–æ–¥ –º–∏–∫—Ä–æ—Å–∫–æ–ø–æ–º... üîç",
            "–≠—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ —Ç–æ—Ä—Ç? üéÇ",
            "–û–ø—Ä–µ–¥–µ–ª—è—é –ø—Ä–æ–¥—É–∫—Ç –ø–æ —Ñ–æ—Ç–æ... üì∑",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç—É—Ä—ã... üé®"
        )

        val textFoodPhrases = listOf(
            "–ß–∏—Ç–∞—é –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ... üìñ",
            "–†–∞–∑–±–∏—Ä–∞—é —Ç–µ–∫—Å—Ç –ø–æ –±—É–∫–≤–∞–º... üìù",
            "–ü–æ–Ω–∏–º–∞—é, –æ —á–µ–º –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ... üí¨",
            "–ò—â—É –≤ –±–∞–∑–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é... üîé",
            "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ —Å–ª–æ–≤–∞... üí≠",
            "–ü–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç –≤ –∫–∞–ª–æ—Ä–∏–∏... üìä"
        )

        val macrosPhrases = listOf(
            "–°–∫–∞–Ω–∏—Ä—É—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–µ–ª–∫–æ–≤... ü•©",
            "–ò—â—É —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã... üçû",
            "–ñ–∏—Ä—ã, –ø–æ–∫–∞–∂–∏—Ç–µ—Å—å! üßà",
            "–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—é –ë–ñ–£... üßÆ"
        )

        val chatPhrases = listOf(
            "–†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º... üí≠",
            "–§–æ—Ä–º—É–ª–∏—Ä—É—é –º—ã—Å–ª–∏... ü§î",
            "–ü–æ–¥–±–∏—Ä–∞—é –Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞... üìù",
            "–û–±–¥—É–º—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å... üß†",
            "–ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç... ‚è≥",
            "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π... üìö",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç... üîç",
            "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å... üéØ",
            "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é... üí°",
            "–°–µ–∫—É–Ω–¥–æ—á–∫—É, –¥—É–º–∞—é... ‚ö°"
        )

        val analysisPhrases = listOf(
            "–ò–∑—É—á–∞—é –≤–∞—à —Ä–∞—Ü–∏–æ–Ω... üìä",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è... üìà",
            "–°—á–∏—Ç–∞—é –æ–±—â–µ–µ –ö–ë–ñ–£... üßÆ",
            "–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤... ‚öñÔ∏è",
            "–û—Ü–µ–Ω–∏–≤–∞—é –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –ø–∏—Ç–∞–Ω–∏—è... ü•ó",
            "–°—Ä–∞–≤–Ω–∏–≤–∞—é —Å –≤–∞—à–∏–º–∏ —Ü–µ–ª—è–º–∏... üéØ",
            "–ò—â—É –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø–∏—Ç–∞–Ω–∏–∏... üîç",
            "–ì–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã... üí°",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å... üî•",
            "–§–æ—Ä–º–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏... üìã"
        )

        val recipePhrases = listOf(
            "–ü—Ä–∏–¥—É–º—ã–≤–∞—é —Ä–µ—Ü–µ–ø—Ç... üë®‚Äçüç≥",
            "–ü–æ–¥–±–∏—Ä–∞—é –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã... ü•ï",
            "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏... ‚öñÔ∏è",
            "–í—Å–ø–æ–º–∏–Ω–∞—é –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã... üîê",
            "–ö–æ–ª–¥—É—é –Ω–∞ –∫—É—Ö–Ω–µ... ‚ú®",
            "–°–æ—Å—Ç–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤... üìù",
            "–û–ø—Ä–µ–¥–µ–ª—è—é –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏... ‚è≤Ô∏è",
            "–ü—Ä–æ–¥—É–º—ã–≤–∞—é —ç—Ç–∞–ø—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è... üìã",
            "–ê–¥–∞–ø—Ç–∏—Ä—É—é –ø–æ–¥ –≤–∞–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è... üéØ",
            "–°–æ–∑–¥–∞—é –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —à–µ–¥–µ–≤—Ä... üç≥"
        )

        val phrases = mutableListOf<String>()
        when (inputMethod) {
            "photo" -> {
                phrases.addAll(baseFoodPhrases)
                phrases.addAll(photoPhrases)
                phrases.addAll(macrosPhrases)
            }
            "text" -> {
                phrases.addAll(baseFoodPhrases)
                phrases.addAll(textFoodPhrases)
                phrases.addAll(macrosPhrases)
            }
            "analysis" -> phrases.addAll(analysisPhrases)
            "recipe" -> phrases.addAll(recipePhrases)
            else -> phrases.addAll(chatPhrases)
        }
        return phrases
    }

    fun startLoadingPhrases(inputMethod: String?) {
        loadingJob?.cancel()
        loadingJob = viewModelScope.launch {
            val phrases = getLoadingPhrases(inputMethod).shuffled()
            var index = 0
            var previousId: String? = null
            while (isActive) {
                val phrase = phrases[index % phrases.size]
                index++
                val msg = ChatMessage(
                    type = MessageType.AI,
                    content = phrase,
                    isProcessing = true,
                    inputMethod = inputMethod,
                    animate = true
                )
                addMessage(msg)
                previousId?.let { removeMessageWithAnimation(it) }
                previousId = msg.id

                var elapsed = 0
                while (elapsed < 3000 && isActive) {
                    delay(100)
                    elapsed += 100
                }
                if (!isActive) break
            }
        }
    }

    fun stopLoadingPhrases() {
        loadingJob?.cancel()
        loadingJob = null
        val ids = messages.filter { it.isProcessing }.map { it.id }
        ids.forEach { removeMessageWithAnimation(it) }
    }
}